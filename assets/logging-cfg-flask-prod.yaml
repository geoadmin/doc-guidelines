version: 1
disable_existing_loggers: False # this allow to get logger at module level

root:
  handlers:
    - console
  level: WARNING
  propagate: True

loggers:
  # Remove all handlers for werkzeug log entries - prevents duplicated logging
  werkzeug:
    handlers: []
  gunicorn.error:
    level: WARNING
    handlers:
      - console
  gunicorn.access:
    level: WARNING
    handlers:
      - console
  urllib3:
    level: WARNING

filters:
  isotime:
    (): logging_utilities.filters.TimeAttribute
    isotime: False
    utc_isotime: True
  flask:
    (): logging_utilities.filters.flask_attribute.FlaskRequestAttribute
    attributes:
      - path
      - method
      - headers
      - remote_addr
      - form
      - query_string
      - url
      - view_args
  const_attributes:
    (): logging_utilities.filters.ConstAttribute
    service_type: flask

formatters:
  json:
    (): logging_utilities.formatters.json_formatter.JsonFormatter
    add_always_extra: False
    filter_attributes:
      - utc_isotime
      - flask_request_path
      - flask_request_method
      - flask_request_query_string
      - flask_request_headers
      - flask_request_form
      - flask_request_remote_addr
      - flask_request_url
      - flask_request_view_args
      - service_type
    remove_empty: True
    ignore_missing: True
    fmt:
      # ECS fields
      message: message
      event:
        category: web
        created: utc_isotime
        duration: duration
        kind: event
        severity: levelno
      http:
        request:
          headers: flask_request_headers.
          method: "%(flask_request_method)s"
        response:
          headers: response.headers.
          status_code: response.status_code
      log:
        level: levelname
        logger: name
        origin:
          file:
            name: pathname
            line: lineno
          function: funcName
      url:
        original: flask_request_url
      process:
        pid: process
        thread:
          id: thread
      service:
        type: service_type

      # Custom fields
      ppbgdi:
        proxy:
          downstream:
            url:
              scheme: remote.request.proto
              domain: remote.request.domain
              full: remote.request.url
              path: remote.request.path
            http:
              response:
                status_code: remote.response.status_code
                headers: remote.response.headers
handlers:
  console:
    class: logging.StreamHandler
    formatter: json
    stream: ext://sys.stdout
    filters:
      - isotime
      - flask
      - const_attributes
